// <auto-generated />
#nullable disable

namespace API.Data.Migrations;

[DbContext(typeof(DataContext))]
[Migration("20241010101139_RenamePhotoEntity")]
partial class RenamePhotoEntity
{
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "8.0.8")
            .HasAnnotation("Relational:MaxIdentifierLength", 63);

        NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

        modelBuilder.Entity("API.Entities.AppAlbum", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<string>("AlbumImageUrl")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("AlbumName")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<int>("TotalSong")
                    .HasColumnType("integer");

                b.Property<int>("TotalView")
                    .HasColumnType("integer");

                b.Property<DateTime>("UploadDate")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("Albums");
            });

        modelBuilder.Entity("API.Entities.AppGenre", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<string>("GenreName")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("Genres");
            });

        modelBuilder.Entity("API.Entities.AppPlaylist", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<string>("AlbumImageUrl")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("PlaylistName")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<int>("TotalSong")
                    .HasColumnType("integer");

                b.Property<int>("TotalView")
                    .HasColumnType("integer");

                b.Property<DateTime>("UploadDate")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("Playlists");
            });

        modelBuilder.Entity("API.Entities.AppSong", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<string>("ArtistName")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("LyricUrl")
                    .HasColumnType("text");

                b.Property<string>("MusicUrl")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("SongName")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<int>("TotalView")
                    .HasColumnType("integer");

                b.Property<DateTime>("UploadDate")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("Songs");
            });

        modelBuilder.Entity("API.Entities.AppUser", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<string>("About")
                    .HasColumnType("text");

                b.Property<string>("ArtistName")
                    .HasColumnType("text");

                b.Property<DateTime>("Created")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateOnly>("DateOfBirth")
                    .HasColumnType("date");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Gender")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<byte[]>("PasswordHashed")
                    .IsRequired()
                    .HasColumnType("bytea");

                b.Property<byte[]>("PasswordSalt")
                    .IsRequired()
                    .HasColumnType("bytea");

                b.Property<string>("Role")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("Users");
            });

        modelBuilder.Entity("API.Entities.SongPhoto", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<int>("AppSongId")
                    .HasColumnType("integer");

                b.Property<bool>("IsMain")
                    .HasColumnType("boolean");

                b.Property<string>("PublicId")
                    .HasColumnType("text");

                b.Property<string>("Url")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("AppSongId");

                b.ToTable("SongPhotos");
            });

        modelBuilder.Entity("API.Entities.UserPhoto", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<int>("AppUserId")
                    .HasColumnType("integer");

                b.Property<bool>("IsMain")
                    .HasColumnType("boolean");

                b.Property<string>("PublicId")
                    .HasColumnType("text");

                b.Property<string>("Url")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("AppUserId");

                b.ToTable("UserPhotos");
            });

        modelBuilder.Entity("API.Entities.SongPhoto", b =>
            {
                b.HasOne("API.Entities.AppSong", "AppSong")
                    .WithMany("SongPhotos")
                    .HasForeignKey("AppSongId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("AppSong");
            });

        modelBuilder.Entity("API.Entities.UserPhoto", b =>
            {
                b.HasOne("API.Entities.AppUser", "AppUser")
                    .WithMany("Photos")
                    .HasForeignKey("AppUserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("AppUser");
            });

        modelBuilder.Entity("API.Entities.AppSong", b =>
            {
                b.Navigation("SongPhotos");
            });

        modelBuilder.Entity("API.Entities.AppUser", b =>
            {
                b.Navigation("Photos");
            });
#pragma warning restore 612, 618
    }
}
